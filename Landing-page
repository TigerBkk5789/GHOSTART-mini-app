import React, { useState, useEffect } from 'react';
import { Wallet, Upload, Search, Filter, X, ExternalLink, AlertCircle, Loader } from 'lucide-react';

const NFTMarketplace = () => {
  const [connected, setConnected] = useState(false);
  const [walletType, setWalletType] = useState('');
  const [walletAddress, setWalletAddress] = useState('');
  const [activeTab, setActiveTab] = useState('explore');
  const [searchQuery, setSearchQuery] = useState('');
  const [showWalletModal, setShowWalletModal] = useState(false);
  const [showMintModal, setShowMintModal] = useState(false);
  const [selectedNFT, setSelectedNFT] = useState(null);
  const [wldBalance, setWldBalance] = useState(0);
  const [ghostartBalance, setGhostartBalance] = useState(0);
  const [blockNumber, setBlockNumber] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [txStatus, setTxStatus] = useState('');
  const [mintingStep, setMintingStep] = useState(0);
  
  const [nftForm, setNftForm] = useState({
    name: '',
    description: '',
    image: null,
    priceWLD: '',
    priceGHOSTART: ''
  });
  
  const WORLDCHAIN_CONFIG = {
    chainId: '0x1e0',
    chainName: 'World Chain',
    nativeCurrency: {
      name: 'Ethereum',
      symbol: 'ETH',
      decimals: 18
    },
    rpcUrls: ['https://worldchain-mainnet.g.alchemy.com/public'],
    blockExplorerUrls: ['https://worldscan.org/']
  };
  
  const CONTRACTS = {
    NFT_COLLECTION: '0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0',
    MARKETPLACE: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',
    WLD_TOKEN: '0x2cFc85d8E48F8EAB294be644d9E25C3030863003',
    GHOSTART_TOKEN: '0x4df029e25EA0043fCBfb7A7f15f2b25F62C9BDb990'
  };
  
  const GHOSTART_TO_WLD = 0.000009;
  
  const [nfts] = useState([
    {
      id: 1,
      listingId: 1,
      tokenId: 1,
      name: 'Cosmic Ghost #001',
      image: 'https://images.unsplash.com/photo-1634017839464-5c339ebe3cb4?w=500&h=500&fit=crop',
      priceWLD: 100,
      priceGHOSTART: 11111111,
      creator: '0x1234...5678',
      owner: '0x1234...5678',
      likes: 42,
      chain: 'World Chain'
    },
    {
      id: 2,
      listingId: 2,
      tokenId: 2,
      name: 'Ethereal Spirit #042',
      image: 'https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?w=500&h=500&fit=crop',
      priceWLD: 75,
      priceGHOSTART: 8333333,
      creator: '0xabcd...ef01',
      owner: '0xabcd...ef01',
      likes: 38,
      chain: 'World Chain'
    },
    {
      id: 3,
      listingId: 3,
      tokenId: 3,
      name: 'Phantom Art #777',
      image: 'https://images.unsplash.com/photo-1620641788421-7a1c342ea42e?w=500&h=500&fit=crop',
      priceWLD: 150,
      priceGHOSTART: 16666667,
      creator: '0x9876...5432',
      owner: '0x9876...5432',
      likes: 56,
      chain: 'BNB Chain'
    }
  ]);

  const getProvider = () => {
    if (typeof window.ethereum !== 'undefined') {
      return window.ethereum;
    }
    return null;
  };

  useEffect(() => {
    fetchBlockNumber();
    const interval = setInterval(fetchBlockNumber, 15000);
    return () => clearInterval(interval);
  }, []);

  const fetchBlockNumber = async () => {
    try {
      const response = await fetch('https://worldchain-mainnet.g.alchemy.com/public', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: 1,
          jsonrpc: '2.0',
          method: 'eth_blockNumber'
        })
      });
      const data = await response.json();
      if (data.result) {
        setBlockNumber(parseInt(data.result, 16));
      }
    } catch (err) {
      console.error('Error fetching block number:', err);
    }
  };

  const connectWallet = async (type) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const provider = getProvider();
      
      if (!provider && type !== 'world') {
        throw new Error('Please install MetaMask or a Web3 wallet');
      }

      if (type === 'world') {
        const mockAddress = '0x' + Math.random().toString(16).substr(2, 40);
        setWalletAddress(mockAddress);
        setWalletType(type);
        setConnected(true);
        setWldBalance(500);
        setGhostartBalance(5000000);
      } else {
        const accounts = await provider.request({ 
          method: 'eth_requestAccounts' 
        });
        
        try {
          await provider.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: WORLDCHAIN_CONFIG.chainId }]
          });
        } catch (switchError) {
          if (switchError.code === 4902) {
            await provider.request({
              method: 'wallet_addEthereumChain',
              params: [WORLDCHAIN_CONFIG]
            });
          }
        }
        
        setWalletAddress(accounts[0]);
        setWalletType(type);
        setConnected(true);
        await fetchBalances(accounts[0]);
      }
      
      setShowWalletModal(false);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchBalances = async (address) => {
    try {
      const wldResponse = await fetch('https://worldchain-mainnet.g.alchemy.com/public', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: 1,
          jsonrpc: '2.0',
          method: 'eth_call',
          params: [{
            to: CONTRACTS.WLD_TOKEN,
            data: '0x70a08231000000000000000000000000' + address.slice(2).padStart(40, '0')
          }, 'latest']
        })
      });
      const wldData = await wldResponse.json();
      if (wldData.result) {
        setWldBalance(parseInt(wldData.result, 16) / 1e18);
      }
      
      const ghostResponse = await fetch('https://worldchain-mainnet.g.alchemy.com/public', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: 2,
          jsonrpc: '2.0',
          method: 'eth_call',
          params: [{
            to: CONTRACTS.GHOSTART_TOKEN,
            data: '0x70a08231000000000000000000000000' + address.slice(2).padStart(40, '0')
          }, 'latest']
        })
      });
      const ghostData = await ghostResponse.json();
      if (ghostData.result) {
        setGhostartBalance(parseInt(ghostData.result, 16) / 1e18);
      }
    } catch (err) {
      console.error('Error fetching balances:', err);
      setWldBalance(500);
      setGhostartBalance(5000000);
    }
  };

  const uploadToIPFS = async (file) => {
    setMintingStep(1);
    setTxStatus('Uploading image to IPFS...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    const ipfsHash = 'Qm' + Math.random().toString(36).substring(2, 15);
    return { ipfsHash, imageUrl: 'https://ipfs.io/ipfs/' + ipfsHash };
  };

  const uploadMetadataToIPFS = async () => {
    setMintingStep(2);
    setTxStatus('Uploading metadata to IPFS...');
    await new Promise(resolve => setTimeout(resolve, 1500));
    return 'https://ipfs.io/ipfs/Qm' + Math.random().toString(36).substring(2, 15);
  };

  const mintNFT = async () => {
    if (!connected) {
      setError('Please connect your wallet first');
      return;
    }
    
    if (!nftForm.image || !nftForm.name || !nftForm.priceWLD) {
      setError('Please fill in all required fields');
      return;
    }

    setIsLoading(true);
    setError(null);
    setMintingStep(0);
    
    try {
      await uploadToIPFS(nftForm.image);
      await uploadMetadataToIPFS();
      
      setMintingStep(3);
      setTxStatus('Minting NFT on World Chain...');
      
      const provider = getProvider();
      if (provider) {
        await provider.request({
          method: 'eth_sendTransaction',
          params: [{
            from: walletAddress,
            to: CONTRACTS.NFT_COLLECTION,
            data: '0x40c10f19' + walletAddress.slice(2).padStart(64, '0'),
            gas: '0x493e0'
          }]
        });
        
        setTxStatus('Transaction submitted! Waiting for confirmation...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      } else {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
      setMintingStep(4);
      setTxStatus('NFT minted successfully!');
      
      setTimeout(() => {
        setShowMintModal(false);
        setIsLoading(false);
        setMintingStep(0);
        setNftForm({ name: '', description: '', image: null, priceWLD: '', priceGHOSTART: '' });
      }, 2000);
    } catch (err) {
      setError('Minting failed: ' + err.message);
      setIsLoading(false);
      setMintingStep(0);
    }
  };

  const buyNFTWithWLD = async (nft) => {
    if (!connected) {
      setError('Please connect your wallet first');
      return;
    }

    setIsLoading(true);
    setError(null);
    setTxStatus('Preparing purchase...');

    try {
      if (wldBalance < nft.priceWLD) {
        throw new Error('Insufficient WLD balance');
      }

      const provider = getProvider();
      if (provider) {
        setTxStatus('Approving WLD tokens...');
        await provider.request({
          method: 'eth_sendTransaction',
          params: [{
            from: walletAddress,
            to: CONTRACTS.WLD_TOKEN,
            data: '0x095ea7b3' + CONTRACTS.MARKETPLACE.slice(2).padStart(64, '0'),
            gas: '0x186a0'
          }]
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));

        setTxStatus('Purchasing NFT...');
        await provider.request({
          method: 'eth_sendTransaction',
          params: [{
            from: walletAddress,
            to: CONTRACTS.MARKETPLACE,
            data: '0xa8a150b8' + nft.listingId.toString(16).padStart(64, '0'),
            gas: '0x30d40'
          }]
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
      setTxStatus('Purchase successful!');
      await fetchBalances(walletAddress);
      
      setTimeout(() => {
        setSelectedNFT(null);
        setIsLoading(false);
        setTxStatus('');
      }, 2000);
    } catch (err) {
      setError('Purchase failed: ' + err.message);
      setIsLoading(false);
    }
  };

  const buyNFTWithGHOSTART = async (nft) => {
    if (!connected) {
      setError('Please connect your wallet first');
      return;
    }

    setIsLoading(true);
    setError(null);
    setTxStatus('Preparing purchase with $GHOSTART...');

    try {
      if (ghostartBalance < nft.priceGHOSTART) {
        throw new Error('Insufficient $GHOSTART balance');
      }

      const provider = getProvider();
      if (provider) {
        setTxStatus('Approving $GHOSTART tokens...');
        await provider.request({
          method: 'eth_sendTransaction',
          params: [{
            from: walletAddress,
            to: CONTRACTS.GHOSTART_TOKEN,
            data: '0x095ea7b3' + CONTRACTS.MARKETPLACE.slice(2).padStart(64, '0'),
            gas: '0x186a0'
          }]
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));

        setTxStatus('Purchasing NFT with $GHOSTART...');
        await provider.request({
          method: 'eth_sendTransaction',
          params: [{
            from: walletAddress,
            to: CONTRACTS.MARKETPLACE,
            data: '0xb8d8c8d9' + nft.listingId.toString(16).padStart(64, '0'),
            gas: '0x30d40'
          }]
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
      setTxStatus('Purchase successful with $GHOSTART!');
      await fetchBalances(walletAddress);
      
      setTimeout(() => {
        setSelectedNFT(null);
        setIsLoading(false);
        setTxStatus('');
      }, 2000);
    } catch (err) {
      setError('Purchase failed: ' + err.message);
      setIsLoading(false);
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        setError('File size must be less than 10MB');
        return;
      }
      setNftForm({ ...nftForm, image: file });
    }
  };

  const calculateGhostartPrice = (wldPrice) => {
    if (!wldPrice) return '';
    return Math.floor(parseFloat(wldPrice) / GHOSTART_TO_WLD);
  };

  const NFTCard = ({ nft }) => (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 cursor-pointer transform hover:-translate-y-2">
      <div className="relative">
        <img src={nft.image} alt={nft.name} className="w-full h-64 object-cover" />
        <div className="absolute top-3 right-3 bg-black/70 text-white px-3 py-1 rounded-full text-xs font-semibold">
          {nft.chain}
        </div>
        {nft.owner === walletAddress && (
          <div className="absolute top-3 left-3 bg-green-500 text-white px-3 py-1 rounded-full text-xs font-semibold">
            Owned
          </div>
        )}
      </div>
      <div className="p-4">
        <h3 className="font-bold text-lg mb-2 text-gray-800">{nft.name}</h3>
        <p className="text-sm text-gray-500 mb-3">by {nft.creator}</p>
        
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-3 mb-3">
          <div className="flex justify-between items-center mb-1">
            <span className="text-sm font-semibold text-gray-700">WLD Price:</span>
            <span className="text-lg font-bold text-purple-600">{nft.priceWLD} WLD</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-xs text-gray-600">GHOSTART:</span>
            <span className="text-sm font-semibold text-blue-600">{nft.priceGHOSTART.toLocaleString()} $GHOST</span>
          </div>
        </div>
        
        <div className="space-y-2">
          {nft.owner === walletAddress ? (
            <button 
              onClick={() => alert('Listing functionality coming soon!')}
              className="w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white px-4 py-2 rounded-lg font-semibold hover:from-green-600 hover:to-emerald-600 transition-all"
            >
              List for Sale
            </button>
          ) : (
            <button 
              onClick={() => setSelectedNFT(nft)}
              className="w-full bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-lg font-semibold hover:from-purple-600 hover:to-blue-600 transition-all"
            >
              Buy Now
            </button>
          )}
          
          <div className="flex gap-2">
            <button 
              onClick={() => alert('Claim rewards: 10 $GHOSTART')}
              className="flex-1 bg-yellow-500 text-white px-3 py-2 rounded-lg font-semibold hover:bg-yellow-600 transition-all text-sm"
            >
              Claim
            </button>
            <button className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-semibold hover:bg-gray-200 transition-all">
              ❤️ {nft.likes}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const wallets = [
    { name: 'World Wallet', icon: '🌍', type: 'world', description: 'Native World Chain wallet' },
    { name: 'MetaMask', icon: '🦊', type: 'metamask', description: 'Popular Web3 wallet' },
    { name: 'Trust Wallet', icon: '🛡️', type: 'trust', description: 'Secure mobile wallet' },
    { name: 'BNB Chain Wallet', icon: '⚡', type: 'bnb', description: 'BNB Chain support' }
  ];

  const mintingSteps = [
    'Uploading image to IPFS',
    'Uploading metadata to IPFS',
    'Minting NFT on World Chain',
    'Listing on marketplace',
    'Complete!'
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50">
      <header className="bg-white shadow-md sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex justify-between items-center flex-wrap gap-4">
            <div className="flex items-center space-x-2">
              <div className="text-3xl">👻</div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                  GHOSTART
                </h1>
                {blockNumber && (
                  <div className="flex items-center space-x-2 text-xs text-gray-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span>Block #{blockNumber.toLocaleString()}</span>
                  </div>
                )}
              </div>
            </div>
            
            {!connected ? (
              <button 
                onClick={() => setShowWalletModal(true)}
                disabled={isLoading}
                className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-2 rounded-lg font-semibold hover:from-purple-600 hover:to-blue-600 transition-all flex items-center space-x-2 disabled:opacity-50"
              >
                <Wallet size={20} />
                <span>{isLoading ? 'Connecting...' : 'Connect Wallet'}</span>
              </button>
            ) : (
              <div className="flex items-center space-x-4 flex-wrap gap-2">
                <div className="bg-gray-100 px-4 py-2 rounded-lg">
                  <p className="text-xs text-gray-500">WLD Balance</p>
                  <p className="font-bold text-purple-600">{wldBalance.toFixed(2)} WLD</p>
                </div>
                <div className="bg-gray-100 px-4 py-2 rounded-lg">
                  <p className="text-xs text-gray-500">$GHOST Balance</p>
                  <p className="font-bold text-blue-600">{Math.floor(ghostartBalance).toLocaleString()}</p>
                </div>
                <div className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-lg font-semibold flex items-center space-x-2">
                  <span>{walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}</span>
                  <a 
                    href={'https://worldscan.org/address/' + walletAddress}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="hover:opacity-80"
                  >
                    <ExternalLink size={16} />
                  </a>
                </div>
              </div>
            )}
          </div>
          
          {error && (
            <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-3 flex items-center justify-between text-red-700">
              <div className="flex items-center space-x-2">
                <AlertCircle size={20} />
                <span className="text-sm">{error}</span>
              </div>
              <button onClick={() => setError(null)} className="hover:opacity-70">
                <X size={18} />
              </button>
            </div>
          )}
          
          {txStatus && (
            <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-3 flex items-center space-x-2 text-blue-700">
              <Loader size={20} className="animate-spin" />
              <span className="text-sm">{txStatus}</span>
            </div>
          )}
        </div>
        
        <div className="bg-gradient-to-r from-purple-600 via-blue-600 to-pink-600 text-white">
          <div className="container mx-auto px-4 py-3">
            <div className="flex items-center justify-between flex-wrap gap-3">
              <div className="flex items-center space-x-3">
                <div className="text-2xl">👻</div>
                <div>
                  <p className="font-bold text-lg">$GHOSTART Token</p>
                  <p className="text-xs opacity-90">Market Cap: 1,850 WLD • Target: 2,000 WLD</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <div className="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
                  <p className="text-xs opacity-90">Launch Progress</p>
                  <div className="flex items-center space-x-2">
                    <div className="w-32 bg-white/30 rounded-full h-2">
                      <div className="bg-white rounded-full h-2" style={{width: '92.5%'}}></div>
                    </div>
                    <span className="text-sm font-bold">92.5%</span>
                  </div>
                </div>
                
                <a 
                  href="https://worldcoin.org/mini-app?app_id=app_15daccf5b7d4ec9b7dbba044a8fdeab5"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="bg-white text-purple-600 px-6 py-2 rounded-lg font-bold hover:bg-gray-100 transition-all flex items-center space-x-2 shadow-lg"
                >
                  <span>Trade Now on PUF</span>
                  <ExternalLink size={16} />
                </a>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="bg-white border-b">
        <div className="container mx-auto px-4">
          <div className="flex space-x-8 overflow-x-auto">
            {['explore', 'create', 'myNFTs', 'activity'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={'py-4 px-2 font-semibold border-b-2 transition-all whitespace-nowrap ' + (
                  activeTab === tab
                    ? 'border-purple-500 text-purple-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                )}
              >
                {tab === 'explore' && 'Explore'}
                {tab === 'create' && 'Create'}
                {tab === 'myNFTs' && 'My NFTs'}
                {tab === 'activity' && 'Activity'}
              </button>
            ))}
          </div>
        </div>
      </div>

      <main className="container mx-auto px-4 py-8">
        {activeTab === 'explore' && (
          <>
            <div className="mb-8 flex flex-col md:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <input
                  type="text"
                  placeholder="Search NFTs, collections, creators..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              </div>
              <button className="bg-white border border-gray-300 px-6 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-all flex items-center space-x-2">
                <Filter size={20} />
                <span>Filters</span>
              </button>
            </div>

            <div className="bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl p-6 mb-8 shadow-lg">
              <div className="flex justify-between items-center flex-wrap gap-4">
                <div>
                  <h3 className="text-xl font-bold mb-2">Current Exchange Rate</h3>
                  <p className="text-lg mb-2">1 $GHOSTART = {GHOSTART_TO_WLD} WLD</p>
                  <div className="flex items-center space-x-2 text-sm">
                    <span>Contract:</span>
                    <a 
                      href={'https://worldscan.org/token/' + CONTRACTS.GHOSTART_TOKEN}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center space-x-1 hover:underline"
                    >
                      <span>{CONTRACTS.GHOSTART_TOKEN.slice(0, 6)}...{CONTRACTS.GHOSTART_TOKEN.slice(-4)}</span>
                      <ExternalLink size={14} />
                    </a>
                  </div>
                </div>
                <div className="bg-white/20 backdrop-blur-sm rounded-lg px-6 py-4">
                  <p className="text-sm mb-1">Trading on PUF Mini App</p>
                  <a 
                    href="https://worldcoin.org/mini-app?app_id=app_15daccf5b7d4ec9b7dbba044a8fdeab5"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-white text-purple-600 px-4 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-all flex items-center space-x-2"
                  >
                    <span>Trade $GHOSTART</span>
                    <ExternalLink size={16} />
                  </a>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {nfts.map((nft) => (
                <NFTCard key={nft.id} nft={nft} />
              ))}
            </div>
          </>
        )}

        {activeTab === 'create' && (
          <div className="max-w-2xl mx-auto">
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-3xl font-bold mb-6 text-gray-800">Mint Your NFT</h2>
              <div className="bg-gradient-to-r from-green-50 to-blue-50 border-2 border-dashed border-green-300 rounded-xl p-8 mb-6 text-center">
                <Upload size={48} className="mx-auto mb-4 text-green-500" />
                <p className="text-lg font-semibold text-gray-700 mb-2">FREE Minting on World Chain!</p>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={handleFileChange}
                  className="hidden"
                  id="file-upload"
                />
                <label 
                  htmlFor="file-upload"
                  className="cursor-pointer text-purple-600 hover:text-purple-700 font-semibold"
                >
                  Drop your file here or click to upload
                </label>
                {nftForm.image && (
                  <p className="mt-2 text-sm text-green-600">✓ {nftForm.image.name}</p>
                )}
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">NFT Name *</label>
                  <input 
                    type="text" 
                    value={nftForm.name}
                    onChange={(e) => setNftForm({...nftForm, name: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500" 
                    placeholder="Enter NFT name"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Description</label>
                  <textarea 
                    rows={4} 
                    value={nftForm.description}
                    onChange={(e) => setNftForm({...nftForm, description: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                    placeholder="Describe your NFT"
                  ></textarea>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Price in WLD *</label>
                    <input 
                      type="number" 
                      placeholder="0.00" 
                      value={nftForm.priceWLD}
                      onChange={(e) => {
                        const wldPrice = e.target.value;
                        setNftForm({
                          ...nftForm,
                          priceWLD: wldPrice,
                          priceGHOSTART: calculateGhostartPrice(wldPrice)
                        });
                      }}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Price in $GHOSTART</label>
                    <input 
                      type="number" 
                      placeholder="Auto-calculated" 
                      value={nftForm.priceGHOSTART}
                      readOnly
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50" 
                    />
                  </div>
                </div>
                
                {mintingStep > 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="space-y-2">
                      {mintingSteps.map((step, index) => (
                        <div key={index} className="flex items-center space-x-2">
                          {index < mintingStep ? (
                            <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                              <span className="text-white text-xs">✓</span>
                            </div>
                          ) : index === mintingStep ? (
                            <Loader size={20} className="text-blue-500 animate-spin" />
                          ) : (
                            <div className="w-5 h-5 bg-gray-300 rounded-full"></div>
                          )}
                          <span className={index <= mintingStep ? 'text-gray-800 font-semibold' : 'text-gray-400'}>
                            {step}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <button 
                  onClick={mintNFT}
                  disabled={isLoading}
                  className="w-full bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-4 rounded-lg font-bold text-lg hover:from-purple-600 hover:to-blue-600 transition-all disabled:opacity-50"
                >
                  {isLoading ? 'Minting...' : 'Mint NFT (FREE)'}
                </button>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'myNFTs' && (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">🎨</div>
            <h3 className="text-2xl font-bold text-gray-800 mb-2">Your NFT Collection</h3>
            <p className="text-gray-500 mb-6">
              {connected ? 'No NFTs found in your wallet' : 'Connect your wallet to view your NFTs'}
            </p>
            {!connected && (
              <button 
                onClick={() => setShowWalletModal(true)}
                className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-8 py-3 rounded-lg font-semibold hover:from-purple-600 hover:to-blue-600 transition-all"
              >
                Connect Wallet
              </button>
            )}
          </div>
        )}

        {activeTab === 'activity' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h2 className="text-2xl font-bold mb-6 text-gray-800">Recent Activity</h2>
            <div className="space-y-4">
              {[1, 2, 3, 4, 5].map((i) => (
                <div key={i} className="flex items-center justify-between border-b pb-4">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-blue-400 rounded-lg"></div>
                    <div>
                      <p className="font-semibold text-gray-800">Cosmic Ghost #{i}</p>
                      <p className="text-sm text-gray-500">Purchased by 0x1234...5678</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-purple-600">{100 * i} WLD</p>
                    <p className="text-xs text-gray-500">2 hours ago</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </main>

      {showWalletModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-md w-full p-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-800">Connect Wallet</h2>
              <button onClick={() => setShowWalletModal(false)} className="text-gray-500 hover:text-gray-700">
                <X size={24} />
              </button>
            </div>
            <div className="space-y-3">
              {wallets.map((wallet) => (
                <button
                  key={wallet.type}
                  onClick={() => connectWallet(wallet.type)}
                  disabled={isLoading}
                  className="w-full flex items-center justify-between p-4 border-2 border-gray-200 rounded-xl hover:border-purple-500 hover:bg-purple-50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <div className="flex items-center space-x-4">
                    <span className="text-3xl">{wallet.icon}</span>
                    <div className="text-left">
                      <span className="font-semibold text-gray-800 block">{wallet.name}</span>
                      <span className="text-xs text-gray-500">{wallet.description}</span>
                    </div>
                  </div>
                  {wallet.type === 'world' && (
                    <span className="bg-green-100 text-green-700 text-xs px-3 py-1 rounded-full font-semibold">
                      Recommended
                    </span>
                  )}
                </button>
              ))}
            </div>
            
            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-start space-x-2">
                <AlertCircle size={20} className="text-blue-600 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-blue-800">
                  <p className="font-semibold mb-1">Network Information</p>
                  <p>Chain ID: 480 (World Chain)</p>
                  <p>RPC: worldchain-mainnet.g.alchemy.com</p>
                  <p className="mt-2">Make sure your wallet is connected to World Chain network.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {selectedNFT && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-2xl w-full p-8 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-800">Purchase NFT</h2>
              <button onClick={() => setSelectedNFT(null)} className="text-gray-500 hover:text-gray-700">
                <X size={24} />
              </button>
            </div>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <img src={selectedNFT.image} alt={selectedNFT.name} className="w-full rounded-xl" />
              </div>
              <div>
                <h3 className="text-xl font-bold mb-2">{selectedNFT.name}</h3>
                <p className="text-gray-500 mb-4">by {selectedNFT.creator}</p>
                
                <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-4 mb-6">
                  <p className="text-sm text-gray-600 mb-2">Choose payment method:</p>
                  <div className="space-y-3">
                    <button 
                      onClick={() => buyNFTWithWLD(selectedNFT)}
                      disabled={isLoading}
                      className="w-full bg-white border-2 border-purple-500 text-purple-600 px-4 py-3 rounded-lg font-bold hover:bg-purple-50 transition-all disabled:opacity-50"
                    >
                      Pay {selectedNFT.priceWLD} WLD
                    </button>
                    <button 
                      onClick={() => buyNFTWithGHOSTART(selectedNFT)}
                      disabled={isLoading}
                      className="w-full bg-white border-2 border-blue-500 text-blue-600 px-4 py-3 rounded-lg font-bold hover:bg-blue-50 transition-all disabled:opacity-50"
                    >
                      Pay {selectedNFT.priceGHOSTART.toLocaleString()} $GHOSTART
                    </button>
                  </div>
                </div>
                
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                  <p className="text-sm text-yellow-800">
                    <strong>Note:</strong> Transaction will be processed on {selectedNFT.chain}
                  </p>
                </div>
                
                <div className="text-sm text-gray-600 space-y-2">
                  <p><strong>Token ID:</strong> #{selectedNFT.tokenId}</p>
                  <p><strong>Contract:</strong> {CONTRACTS.NFT_COLLECTION.slice(0, 6)}...{CONTRACTS.NFT_COLLECTION.slice(-4)}</p>
                  <p><strong>Blockchain:</strong> {selectedNFT.chain}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NFTMarketplace;
